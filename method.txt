 def save(self, path, is_best=False):
        target = self.get_model()
        # torch.save: Python의 pickle을 통해 직렬화된 객체를 디스크에 저장한다. 
        # 모든 종류의 객체의 모델, Tensor와 Dictionary를 저장할 수 있다.
        # Save all Weight
        torch.save(
            target.state_dict(), 
            os.path.join(path, 'model', args.data_train +'_latest_x'+str(args.scale[len(args.scale)-1])+'.pt')
        )

        # Save RCAB Block's Weight file separately
        RCAB_num = int(args.n_blocks) # n_blocks = the number of RCAB
        route = './DRN_params/(X%d)State_dict.txt'%args.ratio # Save confirm
        dict_file = open(route,'w')
        num_list = range(RCAB_num)
        # Create new state dictionary = weight_dict
        weight_dic = {}
        for weight_name in target.state_dict():
            name_space = weight_name.split('.')
            if name_space[0] =="up_blocks" and int(name_space[1]) == 1 and int(name_space[2]) < RCAB_num:
                weight_dic[weight_name] = target.state_dict()[weight_name]
                # Add RCAB's weight
        
        file_name = '_up_blocks_weight_1_X%d'%args.ratio
        # Save Weight file
        torch.save(weight_dic, os.path.join(path, 'model', args.data_train + file_name+str(args.scale[len(args.scale)-1])+'.pt'))
        dict_file.write(str(weight_dic.keys()))
        dict_file.close()


    def load(self, pre_train='.', pre_train_dual='.', weight_share='.',cpu=False):
        if cpu:
            kwargs = {'map_location': lambda storage, loc: storage}
        else:
            kwargs = {}
        #### load primal model ####
        if pre_train != '.':
            print('Loading model from {}'.format(pre_train))
            # print(torch.load(pre_train, **kwargs)
            self.get_model().load_state_dict(
                torch.load(pre_train, **kwargs),
                strict=False,
            )
        if weight_share !='.':
            model = self.model
            params = torch.load(weight_share)
            new_dict = {(k[:10]+'0'+k[11:]):v for k, v in params.items()}
            model_dict = model.state_dict()
            model_dict.update(new_dict)
            model.load_state_dict(new_dict, strict=False)
            #for k, v in model.state_dict().items():
            #    print('\n key : ',k)
            